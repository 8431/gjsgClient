{
  "version": 3,
  "sources": [
    "unknown"
  ],
  "names": [
    "self",
    "cc",
    "Class",
    "extends",
    "Component",
    "properties",
    "left",
    "Node",
    "right",
    "onLoad",
    "canvas",
    "find",
    "px",
    "width",
    "addImageAction",
    "seqLeft",
    "sequence",
    "moveTo",
    "p",
    "easing",
    "easeCubicActionOut",
    "seqRight",
    "runAction"
  ],
  "mappings": ";;AAAA,IAAIA,IAAJ;AACAC,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,cAAML,GAAGM,IADD;AAERC,eAAOP,GAAGM;AAFF,KAHP;;AAQL;AACAE,YAAQ,kBAAY;AAChBT,eAAK,IAAL;AACA,aAAKU,MAAL,GAAcT,GAAGU,IAAH,CAAQ,QAAR,CAAd;AACA,YAAIC,KAAK,KAAKF,MAAL,CAAYG,KAAZ,GAAoB,CAA7B;AACA,aAAKC,cAAL,CAAoBF,EAApB;AACH,KAdI;;AAgBLE,oBAAgB,wBAASF,EAAT,EAAY;AACxB;AACA,YAAIG,UAAUd,GAAGe,QAAH,CAAYf,GAAGgB,MAAH,CAAU,CAAV,EAAahB,GAAGiB,CAAH,CAAK,CAACN,EAAN,EAAU,CAAV,CAAb,EAA2BO,MAA3B,CAAkClB,GAAGmB,kBAAH,CAAsB,CAAtB,CAAlC,CAAZ,CAAd;AACA,YAAIC,WAAWpB,GAAGe,QAAH,CAAYf,GAAGgB,MAAH,CAAU,CAAV,EAAahB,GAAGiB,CAAH,CAAKN,EAAL,EAAS,CAAT,CAAb,EAA0BO,MAA1B,CAAiClB,GAAGmB,kBAAH,CAAsB,CAAtB,CAAjC,CAAZ,CAAf;AACApB,aAAKM,IAAL,CAAUgB,SAAV,CAAoBP,OAApB;AACAf,aAAKQ,KAAL,CAAWc,SAAX,CAAqBD,QAArB;AACH;AAtBI,CAAT",
  "file": "unknown",
  "sourcesContent": [
    "var self;\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        left: cc.Node,\r\n        right: cc.Node\r\n    },\r\n\r\n    // use this for initialization\r\n    onLoad: function () {\r\n        self=this;\r\n        this.canvas = cc.find('Canvas');\r\n        let px = this.canvas.width / 2;\r\n        this.addImageAction(px);\r\n    },\r\n\r\n    addImageAction: function(px){\r\n        //获取边框到中心的距离，即得到两边框的坐标。注意：因为时序问题，必须要canvas的宽度来计算\r\n        let seqLeft = cc.sequence(cc.moveTo(1, cc.p(-px, 0)).easing(cc.easeCubicActionOut(1)));\r\n        let seqRight = cc.sequence(cc.moveTo(1, cc.p(px, 0)).easing(cc.easeCubicActionOut(1)));\r\n        self.left.runAction(seqLeft);\r\n        self.right.runAction(seqRight);\r\n    },\r\n});\r\n"
  ]
}