/**
 * 解决跨域问题
 * header('Access-Control-Allow-Origin:*');
 * JOSNP:<?PHP echo $_GET['callback'].'({"name":"kwin"})';
 *
 * [ajax description]
 * @param  object obj
 {
 type:"post|get",
 url:"http://example.com",
 async:"true",
 dataType:"HTML|text|XML|JSON|JSONP",
 data:{},
 jsonpCallback:"jsonpCallback",
 beforeSend:function(xmlhttp){},
 success:functuon(data){},
 error:function(err){}
 }
 * @return {[type]}     [description]
 */

function uuid(len, radix) {
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');
    var uuid = [], i;
    radix = radix || chars.length;
 
    if (len) {
      // Compact form
      for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];
    } else {
      // rfc4122, version 4 form
      var r;
 
      // rfc4122 requires these characters
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
      uuid[14] = '4';
 
      // Fill in random data.  At i==19 set the high bits of clock sequence as
      // per rfc4122, sec. 4.1.5
      for (i = 0; i < 36; i++) {
        if (!uuid[i]) {
          r = 0 | Math.random()*16;
          uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];
        }
      }
    }
 
    return uuid.join('');
}
window.uuidKey=uuid(16,36);// ;3S29PQ4SQX7M3U59
function ajax(obj) {
    var xmlhttp, type, url, async, dataType, data;
    if (typeof(obj) != 'object')  return false;
    
    type = obj.type == undefined ? 'POST' : obj.type.toUpperCase();
    url = obj.url == undefined ? window.location.href : obj.url;
    async = obj.async == undefined ? true : obj.type;
    dataType = obj.dataType == undefined ? 'HTML' : obj.dataType.toUpperCase();
    data = obj.data == undefined ? {} : obj.data;


    var formatParams = function () {
        if (typeof(data) == "object") {
            var str = "";
            for (var pro in data) {
                str += pro + "=" + data[pro] + "&";
            }
            data = str.substr(0, str.length - 1);
        }
        if (type == 'GET' || dataType == 'JSONP') {
            if (url.lastIndexOf('?') == -1) {
                url += '?' + data;
            } else {
                url += '&' + data;
            }
        }
        //随机key
        
        //  url += '&key=' + uuidKey;
    }
    if (window.XMLHttpRequest) {
        xmlhttp = new XMLHttpRequest();
    } else {
        xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
    }

  
    if (dataType == 'JSONP') {
        if (typeof(obj.beforeSend) == 'function')obj.beforeSend(xmlhttp);
        var callbackName = ('jquery' + Math.random()).replace(".", "");
        var oHead = document.getElementsByTagName('head')[0];
        data.callback = callbackName;
        var ele = document.createElement('script');
        ele.type = "text/javascript";
        ele.onerror = function () {
            console.log('请求失败');
            obj.error && obj.error("请求失败");
        };

        oHead.appendChild(ele);
        window[callbackName] = function (json) {
            oHead.removeChild(ele);
            window[callbackName] = null;
            obj.success && obj.success(json);
        };
        formatParams();
        ele.src = url;
       console.log(callbackName)
       console.log(url)
       console.log(obj.success)

        return ;
    } else {
        formatParams();
        xmlhttp.open(type, url, async);
        xmlhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=utf-8");
         xmlhttp.setRequestHeader("key",uuidKey);//uuidKey
        if (typeof(obj.beforeSend) == 'function')obj.beforeSend(xmlhttp);
        xmlhttp.send(data);
        xmlhttp.onreadystatechange = function () {

            if (xmlhttp.status != 200) {
                console.log(xmlhttp.status + '错误');
                obj.error && obj.error(xmlhttp.status + '错误');
                return ;
            }

            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {

                if (dataType == 'JSON') {
                    try {
                        res = JSON.parse(xmlhttp.responseText);
                    } catch (e) {
                        console.log('返回的json格式不正确');
                        obj.error('返回的json格式不正确');
                    }

                } else if (dataType == 'XML') {
                    res = xmlhttp.responseXML;
                } else {
                    res = xmlhttp.responseText;
                }

                obj.success && obj.success(res);

            }
        }
    }
}
 function getPkRoleMsg(id,num){
     var p=null;
        try{

            if(num==1){
             p= pk.play1;
            }else if(num==2){
                  p= pk.play2;
            }
          
           for(var i in p){
              if(id==p[i].id){
                  return p[i];
              } 
           }
        }catch(e){

        }
    

    }
// var parseJSON = function(data){
    
//     var rValidtokens = /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,  
//         rValidchars = /^[\],:{}\s]*$/,
//         rValidbraces = /(?:^|:|,)(?:\s*\[)+/g,
//         rValidescape = rValidescape = /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g;
//     if(window.JSON && window.JSON.parse){
//         return window.JSON.parse(data);
//     }
//     if ( rValidchars.test( data.replace( rValidescape, '@' )
//         .replace( rValidtokens, ']' )
//         .replace( rValidbraces, '')) ) {

//         return (new Function( 'return ' + data ))();
//     }
    
// }
 /**
     * 遍历数组返回角色信息----
     */
   